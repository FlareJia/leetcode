/*
LeetCode：890. 查找和替换模式
思路是将字母转换成数字，用flag和map来转换。转换之后比较就可以了。
你有一个单词列表 words 和一个模式  pattern，你想知道 words 中的哪些单词与模式匹配。

如果存在字母的排列 p ，使得将模式中的每个字母 x 替换为 p(x) 之后，我们就得到了所需的单词，那么单词与模式是匹配的。

（回想一下，字母的排列是从字母到字母的双射：每个字母映射到另一个字母，没有两个字母映射到同一个字母。）

返回 words 中与给定模式匹配的单词列表。

你可以按任何顺序返回答案。

 

示例：

输入：words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
输出：["mee","aqq"]
解释：
"mee" 与模式匹配，因为存在排列 {a -> m, b -> e, ...}。
"ccc" 与模式不匹配，因为 {a -> c, b -> c, ...} 不是排列。
因为 a 和 b 映射到同一个字母。
*/

class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<Integer> p = new ArrayList<>();
        Map<Character, Integer> map = new HashMap<>();
        int flag1=1;
        for(int i=0; i<pattern.length(); i++){        
            if(!map.containsKey(pattern.charAt(i))){
                map.put(pattern.charAt(i),flag1);
                p.add(flag1);
                flag1++;
            }
            else{
                p.add(map.get(pattern.charAt(i)));
            }
        }
        List<List<Integer>> w = new ArrayList<List<Integer>>();
        for(int i=0; i<words.length; i++){
            List<Integer> word = new ArrayList<>();

            Map<Character, Integer> m = new HashMap<>();
            int flag = 1;
            for(int j=0; j<words[i].length(); j++){
                if(!m.containsKey(words[i].charAt(j))){
                    m.put(words[i].charAt(j),flag);
                    word.add(flag);
                    flag++;
                }
                else{
                    word.add(m.get(words[i].charAt(j)));
                }
            }
            w.add(word);
        }
        List<String> res = new ArrayList<>();
        int i=0;
        for(List list:w){
            if(list.equals(p)){
                res.add(words[i]);
            }
            i++;
        }
        return res;
    }
}

