class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if grid==[]:
            return 0
        lon=len(grid)
        wid=len(grid[0])
        flag='2'
        count=0
        def BFS(i,j):
            if grid[i][j]=='1':
                print('B',i,j)
                grid[i][j]=flag
                if j+1<wid:
                    BFS(i,j+1)
                if i+1<lon:
                    DFS(i+1,j)
                if j-1>=0:
                    BFS(i,j-1)
                if i-1>=0:
                    DFS(i-1,j)
            return
        def DFS(i,j):
            if grid[i][j]=='1':
                print('D',i,j)
                grid[i][j]=flag
                if i+1<lon:
                    DFS(i+1,j)
                if j+1<wid:
                    BFS(i,j+1)
                if j-1>=0:
                    BFS(i,j-1)
                if i-1>=0:
                    DFS(i-1,j)
        #用递归来做，深度遍历，广度遍历
        for i in range(lon):
            for j in range(wid):
                if grid[i][j]=='1':
                    count+=1
                    print('*',i,j)
                    BFS(i,j)
                    DFS(i,j)
        
        return count
    
    
'''
    执行用时为 68 ms 的范例
class Solution:
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        result=0
        def search(row,column,Grid):
            Grid[row][column]='-1'
            #print [row,column]
            #print Grid[row][column]                    
            if row>0 and Grid[row-1][column]=='1':
                search(row-1,column,Grid)
            if row<(len(Grid)-1) and Grid[row+1][column]=='1':
                search(row+1,column,Grid)
            if column>0 and Grid[row][column-1]=='1':
                search(row,column-1,Grid)
            if column<(len(Grid[0])-1) and Grid[row][column+1]=='1':
                search(row,column+1,Grid)
            
            
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]=='1':
                    #print [i,j]
                    #print grid[i][j]
                    result+=1
                    search(i,j,grid)
        return result



执行用时为 64 ms 的范例
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        grid_height = len(grid)
        if grid_height == 0:
            return 0
        grid_width = len(grid[0])
        visited_node = [[0 for i in range(grid_width)] for j in range(grid_height)]
        land_num = 0
        for i in range(grid_height):
            tmpList = grid[i]
            for j in range(grid_width):
                if tmpList[j] == '1' and visited_node[i][j] == 0:
                    visited_node[i][j] = 1
                    self.getConnectId(grid, visited_node, i, j)
                    land_num += 1

        return land_num

    def getConnectId(self, grid, visited_node, i, j):
        if i > 0 and grid[i-1][j] == '1':
            if visited_node[i-1][j] == 0:
                visited_node[i-1][j] = 1
                self.getConnectId(grid, visited_node, i-1, j)
        if i < len(grid) -1 and grid[i+1][j] == '1':
            if visited_node[i+1][j] == 0:
                visited_node[i+1][j] = 1
                self.getConnectId(grid, visited_node, i+1, j)
        if j > 0 and grid[i][j-1] == '1':
            if visited_node[i][j-1] == 0:
                visited_node[i][j-1] = 1
                self.getConnectId(grid, visited_node, i, j-1)
        if j < len(grid[0]) - 1 and grid[i][j+1] == '1':
            if visited_node[i][j+1] == 0:
                visited_node[i][j+1] = 1
                self.getConnectId(grid, visited_node, i, j+1)

'''
