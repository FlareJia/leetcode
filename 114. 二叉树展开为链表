/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        if(root==NULL){
            return;
        }
        // 用深度优先遍历，每次先将右子数存进栈里，然后再将左子树存进栈里。每次出栈都将其连在当前节点的右孩子。
        stack<TreeNode*> temp;
        temp.push(root);
        TreeNode* pre = root;
        while(temp.size()!=0){
            TreeNode* node = temp.top();
            temp.pop();
            if(node->right){
                temp.push(node->right);
            }
            if(node->left){
                temp.push(node->left);
            }
            if(node!=pre){
                pre->left = NULL;
                pre->right = node;
            }
            pre = node;
        }
    }
};
